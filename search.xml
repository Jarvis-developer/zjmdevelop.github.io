<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>iOS开发牛人博客</title>
      <link href="/2014/02/09/iOS%E5%BC%80%E5%8F%91%E7%89%9B%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2014/02/09/iOS%E5%BC%80%E5%8F%91%E7%89%9B%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>学习iOS开发的过程总是想看看牛人们的学习和工作方式,收藏一些牛人的博客供学习!</p><a id="more"></a><ul><li>王巍的博客：<a href="http://onevcat.com" target="_blank" rel="noopener">http://onevcat.com</a></li><li>池建强的博客：<a href="http://macshuo.com" target="_blank" rel="noopener">http://macshuo.com</a></li><li>唐巧的博客：<a href="http://blog.devtang.com" target="_blank" rel="noopener">http://blog.devtang.com</a></li><li>许小帅的博客：<a href="http://imallen.com" target="_blank" rel="noopener">http://imallen.com</a></li><li>蓝晨钰的博客：<a href="http://gracelancy.com" target="_blank" rel="noopener">http://gracelancy.com</a></li><li>萧宸宇的博客：<a href="http://iiiyu.com" target="_blank" rel="noopener">http://iiiyu.com</a></li><li>陶丰平的博客：<a href="http://www.taofengping.com" target="_blank" rel="noopener">http://www.taofengping.com</a></li><li>乔学士的博客：<a href="http://joeyio.com" target="_blank" rel="noopener">http://joeyio.com</a></li><li>破船的博客: <a href="http://beyondvincent.com" target="_blank" rel="noopener">http://beyondvincent.com</a></li><li>陈咏聪的博客：<a href="http://vinqon.com" target="_blank" rel="noopener">http://vinqon.com</a></li><li>骆仕恺的博客: <a href="http://luosky.com" target="_blank" rel="noopener">http://luosky.com</a></li><li>耿健桓的博客：<a href="http://dlog.dismory.com" target="_blank" rel="noopener">http://dlog.dismory.com</a></li><li>李择一的博客：<a href="http://cnblogs.com/biosli" target="_blank" rel="noopener">http://cnblogs.com/biosli</a></li><li>王轲的博客：<a href="http://www.iwangke.me" target="_blank" rel="noopener">http://www.iwangke.me</a></li><li>杨宇建的博客：<a href="http://www.cnblogs.com/easonoutlook" target="_blank" rel="noopener">http://www.cnblogs.com/easonoutlook</a></li><li>连栩的博客： <a href="http://lianxu.me" target="_blank" rel="noopener">http://lianxu.me</a></li><li>高嘉峻的博客：<a href="http://jiajun.org" target="_blank" rel="noopener">http://jiajun.org</a></li><li>webfrogs的博客：<a href="http://webfrogs.me" target="_blank" rel="noopener">http://webfrogs.me</a></li><li>sunny的博客：<a href="http://blog.sunnyxx.com" target="_blank" rel="noopener">http://blog.sunnyxx.com</a></li><li>景总的博客：<a href="http://blog.csdn.net/justinjing0612" target="_blank" rel="noopener">http://blog.csdn.net/justinjing0612</a></li><li>谭灏的博客：<a href="http://tanhao.me" target="_blank" rel="noopener">http://tanhao.me</a></li><li>田伟宇的博客：<a href="http://casatwy.com" target="_blank" rel="noopener">http://casatwy.com</a></li><li>念茜的博客: <a href="http://nianxi.net" target="_blank" rel="noopener">http://nianxi.net</a></li></ul><p>目前收录这么多牛人博客,后序再慢慢添加! 如果大家有好的博客,欢迎推荐!!</p>]]></content>
      
      <categories>
          
          <category> iOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 技术提升 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS中 typedef 和 define 理解</title>
      <link href="/2014/02/07/typedef%20%E5%92%8C%20define%20%E7%9A%84%E5%BE%AE%E8%A7%A3%E9%87%8A/"/>
      <url>/2014/02/07/typedef%20%E5%92%8C%20define%20%E7%9A%84%E5%BE%AE%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<p>写在前面,学习iOS开发的过程中会遇到一些很细节的问题,但是这些问题对于开发和学习又很重要所以就把这些东西记录下来方便回顾和分享给大家,本章主要讨论 <code>define</code> ,<code>typedef</code>的区别.</p><a id="more"></a><h4 id="1-define-宏定义"><a href="#1-define-宏定义" class="headerlink" title="1. define 宏定义"></a>1. <code>define</code> 宏定义</h4><p>作用: 文本替换: 把出现的文本替换为定义的文本.</p><p>示例:</p><ul><li><code>typedef float floatX;</code>   &emsp;&emsp; <font color="#006600"> // 给float取别名为floatX</font></li><li><code>typedef void(^passBlock) (int a,int b);</code>  &emsp;&emsp;<font color="#006600"> // 给block取别名passBlock</font></li><li><code>typedef struct PersonObject{  NSString *name;}person;</code> &emsp;&emsp; <font color="#006600"> // 给PersonObject结构体取别名为person。使用方法: person p = {“Jarvis”};</font></li></ul><h4 id="2-typedef-类型定义"><a href="#2-typedef-类型定义" class="headerlink" title="2. typedef 类型定义"></a>2. <code>typedef</code> 类型定义</h4><p>作用: 类型替换: 就是把复杂类型改一个简单的名字.</p><p>示例:</p><ul><li><code>#define kSayHello @&quot;Hello World !&quot;</code> &emsp;&emsp; <font color="#006600"> // kSayHello 替换后面的文本</font></li><li><code>#define kSayHelloTwo kSayHello</code> &emsp;&emsp; <font color="#006600"> // kSayHelloTwo 替换 kSayHello</font></li></ul><h4 id="3-define和typedef的使用注意事项"><a href="#3-define和typedef的使用注意事项" class="headerlink" title="3. define和typedef的使用注意事项"></a>3. <code>define</code>和<code>typedef</code>的使用注意事项</h4><ul><li><p><code>define</code> 是文本替换，是预编译指令，本身不参与编译，除非希望替换的文本中有<code>;</code>否则不用加<code>;</code><br><code>typedef</code> 是类型替换，语句的一种，结尾必须有<code>;</code></p></li><li><p><code>define</code> 在方法/函数中则作用域从写的地方开始有效，直至使用<code>#undef</code>（不写此指令则后面一直有效）。<code>typedef</code> 写在方法/函数中则作用域 只在此方法/函数中有效。</p></li><li><p>若使用<code>typedef char * MyString;</code>则 <code>MyString s1,s2</code> 等价于  <code>char *s1</code>; <code>char *s2</code></p></li><li><p>若使用 <code>#define MyString char *</code> 则 <code>MyString s1,s2</code> 等价于<code>char *s1,s2</code> 即 <code>char *s1</code>; <code>char s2</code></p></li><li><p>再次说明了<code>typedef</code>是类型替换，直接参与编译，而<code>define</code>只是简单的文本替换.</p></li></ul>]]></content>
      
      <categories>
          
          <category> iOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>探讨分类和类扩展</title>
      <link href="/2014/01/08/%E5%88%86%E7%B1%BB%E5%92%8C%E6%89%A9%E5%B1%95/"/>
      <url>/2014/01/08/%E5%88%86%E7%B1%BB%E5%92%8C%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<p>  在最初学习<code>category</code>和<code>extension</code>的时候感觉很是头大，什么是分类，什么是类扩展，他们分别用在什么场合，各有哪些特点？后来随着自己的深入了解，发现这真的是很出色的两种扩展。希望把自己的经验写出来，让更多人能够理解分类和类扩展，并实际运用他们。</p><a id="more"></a><p>分类运用场景举例：想要收集每个页面的启动时间。</p><h4 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h4><p>问题:<br>项目中已经有上百个页面了，如果一个一个的加，浪费时间不说，以后增加了新页面，还需要添加方法。</p><p>解决方法:<br>我们可以发现页面都继承了<code>UIViewController</code>，想要在每个页面都执行的代码，可以写在这些页面的父类中。我们可以把代码写在<code>UIViewController</code>中。</p><h4 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h4><p>问题:<br><code>UIViewController</code>是官方类，我们只能调用期接口，并不能修改他的实现。</p><p>解决方法:<br>使用分类（category）。</p><h4 id="关于分类的一些重点"><a href="#关于分类的一些重点" class="headerlink" title="关于分类的一些重点"></a>关于分类的一些重点</h4><h5 id="第一-分类category的作用"><a href="#第一-分类category的作用" class="headerlink" title="第一: 分类category的作用"></a>第一: 分类<code>category</code>的作用</h5><ul><li>作用：可以在不修改原来类的基础上，为一个类扩展方法。</li><li>最主要的用法：给系统自带的类扩展方法。</li></ul><h5 id="第二-分类category中能写点啥-？"><a href="#第二-分类category中能写点啥-？" class="headerlink" title="第二: 分类category中能写点啥 ？"></a>第二: 分类<code>category</code>中能写点啥 ？</h5><ul><li>分类中只能添加“方法”，不能增加成员变量。</li><li>分类中可以访问原来类中的成员变量，但是只能访问<code>@protect</code>和<code>@public</code>形式的变量。如果想要访问本类中的私有变量，分类和子类一样，只能通过方法来访问。</li><li>如果一定要在分类中添加成员变量，可以通过<code>getter</code>，<code>setter</code>手段进行添加，详细以后再写，</li></ul><h5 id="第三-分类的书写方法"><a href="#第三-分类的书写方法" class="headerlink" title="第三: 分类的书写方法"></a>第三: 分类的书写方法</h5><p>  假设我们有一个类，名叫<code>Person</code>，意义是人类。在<code>person</code>类中我们有一个方法，<code>-(void)eat;</code>意义是吃，因为每个人类都会吃。<br>人类有非常多的共同属性,也有非常多的不同属性。有的人会说英语有的人就不会,所以我们给会说英语的人添加一个说英语的分类<code>speakEnglish</code>因为是<code>Person</code>类的分类，你会看到生成的名字叫做<code>Person+ speakEnglish</code>。下面让我们来试着添加一下。</p><ul><li>分类的使用过程：声明分类-&gt;实现分类-&gt;使用分类</li><li>在项目中添加类，选择Objective-C File，填写分类的类名 -&gt; 选择文件类型是分类 -&gt; 选择类</li><li>在<code>类名 + 分类名称.h</code>中声明方法</li><li>在<code>类名 + 分类名称.m</code>中实现方法</li></ul><!--第四: 回到最开始收集页面启动时间的问题，本类是系统的类，这里是UIViewController，我们可以使用分类扩展他的方法，也可以重写他的方法，可以我需要在调用的地方加头文件，所有子类都写头文件和直接在子类写方法没有什么区别，怎么样可以使得不写头文件，子类就能调用我们写的代码呢？回答：我们可以进行方法交换（这样可以不必在调用的地方增加头文件），从而使得在实现的时候调用重写的方法。具体实现以后会写，TODO--><h5 id="第四-分类的执行优先级"><a href="#第四-分类的执行优先级" class="headerlink" title="第四: 分类的执行优先级"></a>第四: 分类的执行优先级</h5><ul><li>在本类和分类有相同的方法时，优先调用分类的方法再调用本类的方法。</li><li>如果有两个分类，他们都实现了相同的方法，如何判断谁先执行？分类执行顺序可以通过<code>targets,Build Phases,Complie Source</code>进行调节，注意执行顺序是从上到下的。（只有两个相同方法名的分类）</li></ul><h5 id="第五-分类category和类扩展extension的关系"><a href="#第五-分类category和类扩展extension的关系" class="headerlink" title="第五: 分类category和类扩展extension的关系"></a>第五: 分类<code>category</code>和类扩展<code>extension</code>的关系</h5><ul><li>类扩展<code>extension</code>是<code>category</code>的一个特例，有时候也被称为匿名分类。他的作用是为一个类添加一些私有的成员变量和方法。</li><li>类扩展能写点啥？和分类不同，类扩展即可以声明成员变量又可以声明方法。</li><li>类扩展听上去很复杂，但其实我们很早就认识他了。你记得继承自<code>UIViewController</code>的<code>ViewController</code>和继承自<code>NSObject</code>的类有什么不同么？<br>继承自<code>UIViewController</code>的<code>ViewController</code>类,对比看一下继承自<code>NSObject</code>的类我们会发现没有下面的代码块<br>  <code>@interface ViewController()</code><font color="#006600">&emsp;&emsp;//这就是类扩展的写法</font><br> <code>@end</code></li><li>类扩展可以定义在<code>.m</code>文件中，这种扩展方式中定义的变量都是私有的，也可以定义在<code>.h</code>文件中，这样定义的代码就是共有的，类扩展在<code>.m</code>文件中声明私有方法是非常好的方式。</li><li>类扩展中添加的新方法，一定要实现,<code>category</code>中没有这种限制。</li></ul>]]></content>
      
      <categories>
          
          <category> iOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>简介</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>参加过多个产品的设计,交互,技术定型,开发,发布等完成的开发流程.具有快速学习的能力和沟通能力，能够快速融入团队,喜欢钻研新技术，更把新技术完美运用到项目中为乐趣,对工作和生活有很强的责任心,认真对待做的每一件事情.</p><h4 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h4><p> 邮箱: zjm100163@163.com</p>]]></content>
    </entry>
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
