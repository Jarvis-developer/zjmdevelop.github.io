<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[测试图片]]></title>
      <url>/2017/10/11/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 中 typedef 和 define 理解]]></title>
      <url>/2014/04/07/typedef%20%E5%92%8C%20define%20%E7%9A%84%E5%BE%AE%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<p>写在前面,学习iOS开发的过程中会遇到一些很细节的问题,但是这些问题对于开发和学习又很重要所以就把这些东西记录下来方便回顾和分享给大家,本章主要讨论 <code>define</code> ,<code>typedef</code>的区别.</p>
<a id="more"></a>
<h3 id="1-define-宏定义"><a href="#1-define-宏定义" class="headerlink" title="1. define 宏定义"></a>1. <code>define</code> 宏定义</h3><p>作用: 文本替换: 把出现的文本替换为定义的文本.</p>
<p>示例:</p>
<ul>
<li><p><code>typedef float floatX;</code>   &emsp;&emsp; <font color="#006600"> // 给float取别名为floatX</font></p>
</li>
<li><p><code>typedef void(^passBlock) (int a,int b);</code>  &emsp;&emsp;<font color="#006600"> // 给block取别名passBlock</font></p>
</li>
<li><p><code>typedef struct PersonObject
{
  NSString *name;
}person;</code> &emsp;&emsp; <font color="#006600"> // 给PersonObject结构体取别名为person。使用方法: <code>person p = {&quot;Jarvis&quot;};</code></font></p>
</li>
</ul>
<h3 id="2-typedef-类型定义"><a href="#2-typedef-类型定义" class="headerlink" title="2. typedef 类型定义"></a>2. <code>typedef</code> 类型定义</h3><p>作用: 类型替换: 就是把复杂类型改一个简单的名字.</p>
<p>示例:</p>
<ul>
<li><code>#define kSayHello @&quot;Hello World !&quot;</code> &emsp;&emsp; <font color="#006600"> // <code>kSayHello</code>替换后面的文本</font></li>
<li><code>#define kSayHelloTwo kSayHello</code> &emsp;&emsp; <font color="#006600"> // <code>kSayHelloTwo</code>替换<code>kSayHello</code></font></li>
</ul>
<h3 id="3-define和typedef的使用注意事项"><a href="#3-define和typedef的使用注意事项" class="headerlink" title="3. define和typedef的使用注意事项"></a>3. <code>define</code>和<code>typedef</code>的使用注意事项</h3><ul>
<li><p><code>define</code> 是文本替换，是预编译指令，本身不参与编译，除非希望替换的文本中有<code>;</code>否则不用加<code>;</code></p>
<p><code>typedef</code> 是类型替换，语句的一种，结尾必须有<code>;</code></p>
</li>
<li><p><code>define</code> 在方法/函数中则作用域从写的地方开始有效，直至使用<code>#undef</code>（不写此指令则后面一直有效）。<code>typedef</code> 写在方法/函数中则作用域 只在此方法/函数中有效。</p>
</li>
<li>若使用<code>typedef char * MyString;</code>则 <code>MyString s1,s2</code> 等价于  <code>char *s1</code>; <code>char *s2</code></li>
<li><p>若使用 <code>#define MyString char *</code> 则 <code>MyString s1,s2</code> 等价于<code>char *s1,s2</code> 即 <code>char *s1</code>; <code>char s2</code></p>
<p>再次说明了<code>typedef</code>是类型替换，直接参与编译，而<code>define</code>只是简单的文本替换.</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 Objective-C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[探讨分类和类扩展]]></title>
      <url>/2014/01/08/%E5%88%86%E7%B1%BB%E5%92%8C%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<p>  在最初学习category和extension的时候感觉很是头大，什么是分类，什么是类扩展，他们分别用在什么场合，各有哪些特点？后来随着自己的深入了解，发现这真的是很出色的两种扩展。希望把自己的经验写出来，让更多人能够理解分类和类扩展，并实际运用他们。</p>
<a id="more"></a>
<p>分类运用场景举例：想要收集每个页面的启动时间。</p>
<p><strong>问题1：</strong></p>
<p>项目中已经有上百个页面了，如果一个一个的加，浪费时间不说，以后增加了新页面，还需要添加方法。<br>解决方法：<br>我们可以发现页面都继承了UIViewController，想要在每个页面都执行的代码，可以写在这些页面的父类中。我们可以把代码写在UIViewController中。</p>
<p><strong>问题2：</strong></p>
<p>UIViewController是官方类，我们只能调用期接口，并不能修改他的实现。<br>解决方法：使用分类（category）。</p>
<p><strong>关于分类的一些重点</strong></p>
<p>第一: 分类（category）的作用</p>
<ul>
<li>作用：可以在不修改原来类的基础上，为一个类扩展方法。</li>
<li>最主要的用法：给系统自带的类扩展方法。</li>
</ul>
<p>第二: 分类中能写点啥 ？</p>
<ul>
<li>分类中只能添加“方法”，不能增加成员变量。</li>
<li>分类中可以访问原来类中的成员变量，但是只能访问@protect和@public形式的变量。如果想要访问本类中的私有变量，分类和子类一样，只能通过方法来访问。</li>
<li>如果一定要在分类中添加成员变量，可以通过getter，setter手段进行添加，详细以后再写，TODO。</li>
</ul>
<p>第三: 分类的书写方法</p>
<p>  假设我们有一个类，名叫<code>Person</code>，意义是人类。在<code>person</code>类中我们有一个方法，<code>-(void)eat;</code>意义是吃，因为每个人类都会吃。<br>人类有非常多的共同属性,也有非常多的不同属性。有的人会说英语有的人就不会,所以我们给会说英语的人添加一个说英语的分类<code>speakEnglish</code>因为是<code>Person</code>类的分类，你会看到生成的名字叫做<code>Person+ speakEnglish</code>。下面让我们来试着添加一下。</p>
<ul>
<li>分类的使用过程：声明分类-&gt;实现分类-&gt;使用分类</li>
<li>在项目中添加类，选择Objective-C File，填写分类的类名 -&gt; 选择文件类型是分类 -&gt; 选择类</li>
<li>在<code>类名 + 分类名称.h</code>中声明方法</li>
<li>在<code>类名 + 分类名称.m</code>中实现方法</li>
</ul>
<!--第四: 回到最开始收集页面启动时间的问题，本类是系统的类，这里是UIViewController，我们可以使用分类扩展他的方法，也可以重写他的方法，可以我需要在调用的地方加头文件，所有子类都写头文件和直接在子类写方法没有什么区别，怎么样可以使得不写头文件，子类就能调用我们写的代码呢？

回答：
我们可以进行方法交换（这样可以不必在调用的地方增加头文件），从而使得在实现的时候调用重写的方法。具体实现以后会写，TODO-->
<p>第四: 分类的执行优先级</p>
<ul>
<li>在本类和分类有相同的方法时，优先调用分类的方法再调用本类的方法。</li>
<li>如果有两个分类，他们都实现了相同的方法，如何判断谁先执行？分类执行顺序可以通过targets,Build Phases,Complie Source进行调节，注意执行顺序是从上到下的。（只有两个相同方法名的分类）</li>
</ul>
<p>第五: 分类(category)和类扩展(extension)的关系</p>
<ul>
<li>类扩展(extension）是category的一个特例，有时候也被称为匿名分类。他的作用是为一个类添加一些私有的成员变量和方法。</li>
<li>类扩展能写点啥？和分类不同，类扩展即可以声明成员变量又可以声明方法。</li>
<li>类扩展听上去很复杂，但其实我们很早就认识他了。你记得继承自UIViewController的ViewController和继承自NSObject的类有什么不同么？</li>
<li>继承自UIViewController的ViewController类</li>
<li><p>对比看一下继承自NSObject的类我们会发现没有上面的代码块</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> ViewController()<span class="comment">//这就是类扩展的写法</span></div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
</li>
<li><p>类扩展可以定义在.m文件中，这种扩展方式中定义的变量都是私有的，也可以定义在.h文件中，这样定义的代码就是共有的，类扩展在.m文件中声明私有方法是非常好的方式。</p>
</li>
<li>类扩展中添加的新方法，一定要实现,category中没有这种限制。</li>
</ul>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[简介]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>参加过多个产品的设计,交互,技术定型,开发,发布等完成的开发流程。具有快速学习的能力和沟通能力，能够快速融入团队,喜欢钻研新技术，更把新技术完美运用到项目中为乐趣,对工作和生活有很强的责任心,认真对待做的每一件事情</p>
<h4 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h4><p> 邮箱: zjm100163@163.com</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分类]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[<p>这里是标签</p>
]]></content>
    </entry>
    
  
</search>
